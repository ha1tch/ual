package bst

import "fmt"

-- Create a new Binary Search Tree using bitwise path encoding
function New()
  -- Create the main data stack for values with hashed perspective capability
  @Stack.new(Any, KeyType: Any): alias:"data"
  
  -- Metadata stack
  @Stack.new(Any): alias:"meta"
  
  -- Initialize metadata
  @meta: push({
    root_key = nil,  -- No root initially
    size = 0         -- Empty tree
  })
  
  -- Return the tree structure with references to data stacks
  return {
    data = data,
    meta = meta
  }
end

-- Encode a node path into a bit-packed key
-- In this implementation:
-- - 0 means left child
-- - 1 means right child
-- - The root has no path
-- - A path of 010 means: right->left->right from root
function encodePath(path_bits, depth)
  -- Pack into a simple, efficient format:
  -- [6 bits for depth][58 bits for path]
  -- This gives us 58 bits to represent the path, which is enough for very deep trees
  -- The 6 bits for depth tell us how many bits in the path are significant
  return {
    bits = path_bits,  -- The actual path bits
    depth = depth      -- The number of bits that are significant
  }
end

-- Generate node key for the root
function rootKey()
  return encodePath(0, 0)
end

-- Generate node key for left child
function leftChildKey(parent_key)
  -- Shift left by 1 (multiply by 2) to add a 0 bit
  new_bits = parent_key.bits << 1
  return encodePath(new_bits, parent_key.depth + 1)
end

-- Generate node key for right child
function rightChildKey(parent_key)
  -- Shift left by 1 (multiply by 2) and add 1 to add a 1 bit
  new_bits = (parent_key.bits << 1) | 1
  return encodePath(new_bits, parent_key.depth + 1)
end

-- Generate node key for parent
function parentKey(child_key)
  -- Can't go up from root
  if_true(child_key.depth == 0)
    return nil
  end_if_true
  
  -- Shift right by 1 (divide by 2) to remove the last bit
  new_bits = child_key.bits >> 1
  return encodePath(new_bits, child_key.depth - 1)
end

-- Function to convert a path key to a string for debugging
function pathToString(path_key)
  if_true(path_key.depth == 0)
    return "root"
  end_if_true
  
  path_str = ""
  bits = path_key.bits
  mask = 1 << (path_key.depth - 1)
  
  for i = 1, path_key.depth do
    if_true((bits & mask) != 0)
      path_str = path_str .. "R"
    else
      path_str = path_str .. "L"
    end_if_true
    mask = mask >> 1
  end
  
  return path_str
end

-- Insert a key-value pair into the tree
function Insert(tree, key, value)
  @tree.meta: peek(0)
  meta = tree.meta.pop()
  
  -- Case: Empty tree
  if_true(meta.root_key == nil)
    -- Create the root node key (0 depth, 0 bits)
    root_path = rootKey()
    
    -- Store the value in the data stack using hashed perspective
    @tree.data: hashed
    @tree.data: push(root_path, {key = key, value = value})
    
    -- Update metadata
    meta.root_key = root_path
    meta.size = 1
    @tree.meta: modify_element(0, meta)
    
    return tree
  end_if_true
  
  -- Non-empty tree: traverse to find the insertion point
  current_path = meta.root_key
  
  while_true(true)
    -- Get the current node
    @tree.data: hashed
    current_node = tree.data.peek(current_path)
    
    -- If key already exists, update value
    if_true(current_node.key == key)
      current_node.value = value
      @tree.data: push(current_path, current_node)
      return tree
    end_if_true
    
    -- According to BST property
    if_true(key < current_node.key)
      -- Go left
      left_path = leftChildKey(current_path)
      
      @tree.data: hashed
      if_true(not tree.data.contains(left_path))
        -- Insert as left child
        @tree.data: push(left_path, {key = key, value = value})
        meta.size = meta.size + 1
        @tree.meta: modify_element(0, meta)
        return tree
      end_if_true
      
      current_path = left_path
    else
      -- Go right
      right_path = rightChildKey(current_path)
      
      @tree.data: hashed
      if_true(not tree.data.contains(right_path))
        -- Insert as right child
        @tree.data: push(right_path, {key = key, value = value})
        meta.size = meta.size + 1
        @tree.meta: modify_element(0, meta)
        return tree
      end_if_true
      
      current_path = right_path
    end_if_true
  end_while_true
end

-- Find a value by key in the tree
function Find(tree, key)
  @tree.meta: peek(0)
  meta = tree.meta.pop()
  
  -- Empty tree check
  if_true(meta.root_key == nil)
    return nil
  end_if_true
  
  -- Traverse the tree to find the key
  current_path = meta.root_key
  
  while_true(true)
    -- Get the current node
    @tree.data: hashed
    
    if_true(not tree.data.contains(current_path))
      return nil
    end_if_true
    
    current_node = tree.data.peek(current_path)
    
    -- If key found, return the value
    if_true(current_node.key == key)
      return current_node.value
    end_if_true
    
    -- According to BST property
    if_true(key < current_node.key)
      -- Go left
      current_path = leftChildKey(current_path)
    else
      -- Go right
      current_path = rightChildKey(current_path)
    end_if_true
  end_while_true
end

-- Check if a node exists at the given path
function hasNodeAt(tree, path)
  @tree.data: hashed
  return tree.data.contains(path)
end

-- Get left child path if it exists
function getLeftChild(tree, parent_path)
  left_path = leftChildKey(parent_path)
  
  if_true(hasNodeAt(tree, left_path))
    return left_path
  end_if_true
  
  return nil
end

-- Get right child path if it exists
function getRightChild(tree, parent_path)
  right_path = rightChildKey(parent_path)
  
  if_true(hasNodeAt(tree, right_path))
    return right_path
  end_if_true
  
  return nil
end

-- Find the minimum key (leftmost node) in a subtree
function findMin(tree, subtree_root_path)
  if_true(subtree_root_path == nil)
    return nil
  end_if_true
  
  current_path = subtree_root_path
  
  while_true(true)
    left_path = getLeftChild(tree, current_path)
    
    if_true(left_path == nil)
      break
    end_if_true
    
    current_path = left_path
  end_while_true
  
  return current_path
end

-- Delete a node with the given key
function Delete(tree, key)
  @tree.meta: peek(0)
  meta = tree.meta.pop()
  
  -- Empty tree check
  if_true(meta.root_key == nil)
    return tree
  end_if_true
  
  -- Find the node to delete and its parent
  @Stack.new(Any): alias:"path"
  current_path = meta.root_key
  parent_path = nil
  node_to_delete_path = nil
  going_left = false
  
  -- Search for the node to delete
  while_true(true)
    @tree.data: hashed
    
    if_true(not tree.data.contains(current_path))
      -- Key not found, nothing to delete
      return tree
    end_if_true
    
    current_node = tree.data.peek(current_path)
    
    -- Found the node to delete
    if_true(current_node.key == key)
      node_to_delete_path = current_path
      break
    end_if_true
    
    -- Keep track of parent and direction
    parent_path = current_path
    
    -- Continue searching according to BST property
    if_true(key < current_node.key)
      current_path = leftChildKey(current_path)
      going_left = true
    else
      current_path = rightChildKey(current_path)
      going_left = false
    end_if_true
  end_while_true
  
  -- Now we have the node to delete and its parent
  @tree.data: hashed
  node_to_delete = tree.data.peek(node_to_delete_path)
  
  -- Case 1: Node to delete has no children
  left_path = getLeftChild(tree, node_to_delete_path)
  right_path = getRightChild(tree, node_to_delete_path)
  
  if_true(left_path == nil and right_path == nil)
    -- Remove the node
    @tree.data: remove(node_to_delete_path)
    
    -- If it's the root, update root key
    if_true(parent_path == nil)
      meta.root_key = nil
    end_if_true
  
  -- Case 2: Node to delete has only one child
  elseif_true(left_path == nil)
    -- Only has right child
    
    if_true(parent_path == nil)
      -- Node to delete is the root
      meta.root_key = right_path
    else
      -- Connect parent to child, bypassing the node to delete
      @tree.data: remove(node_to_delete_path)
      
      -- Update the parent's appropriate child reference
      if_true(going_left)
        -- We would need to re-insert the right child at parent's left position
        -- Since we can't directly manipulate parent pointers in this model,
        -- we'll need to:
        -- 1. Get the right subtree
        -- 2. Delete the right subtree
        -- 3. Re-insert it at the new position
        MoveSubtree(tree, right_path, leftChildKey(parent_path))
      else
        MoveSubtree(tree, right_path, rightChildKey(parent_path))
      end_if_true
    end_if_true
  
  elseif_true(right_path == nil)
    -- Only has left child
    
    if_true(parent_path == nil)
      -- Node to delete is the root
      meta.root_key = left_path
    else
      -- Connect parent to child, bypassing the node to delete
      @tree.data: remove(node_to_delete_path)
      
      -- Update the parent's appropriate child reference
      if_true(going_left)
        MoveSubtree(tree, left_path, leftChildKey(parent_path))
      else
        MoveSubtree(tree, left_path, rightChildKey(parent_path))
      end_if_true
    end_if_true
  
  -- Case 3: Node to delete has two children
  else
    -- Find successor (minimum element in right subtree)
    successor_path = findMin(tree, right_path)
    successor = tree.data.peek(successor_path)
    
    -- Replace node to delete's key and value with successor's
    node_to_delete.key = successor.key
    node_to_delete.value = successor.value
    @tree.data: push(node_to_delete_path, node_to_delete)
    
    -- Now delete the successor node (it has at most one right child)
    Delete(tree, successor.key)
    
    -- Return early as we've already decremented size in the recursive call
    return tree
  end_if_true
  
  -- Decrease tree size
  meta.size = meta.size - 1
  @tree.meta: modify_element(0, meta)
  
  return tree
end

-- Move a subtree from one position to another
function MoveSubtree(tree, source_path, target_path)
  -- Get all nodes in the subtree
  @Stack.new(Any): alias:"nodes"
  
  -- Helper to gather nodes recursively
  function gatherNodes(path)
    if_true(not hasNodeAt(tree, path))
      return
    end_if_true
    
    @tree.data: hashed
    node = tree.data.peek(path)
    
    -- Save this node's info
    @nodes: push({
      path = path,
      key = node.key,
      value = node.value
    })
    
    -- Recursively gather children
    left_path = getLeftChild(tree, path)
    if_true(left_path != nil)
      gatherNodes(left_path)
    end_if_true
    
    right_path = getRightChild(tree, path)
    if_true(right_path != nil)
      gatherNodes(right_path)
    end_if_true
  end
  
  -- Gather all nodes in the subtree
  gatherNodes(source_path)
  
  -- Calculate path offset (difference between source and target)
  source_bits = source_path.bits
  target_bits = target_path.bits
  source_depth = source_path.depth
  target_depth = target_path.depth
  
  -- Insert nodes at new positions
  while_true(nodes.depth() > 0)
    node_info = nodes.pop()
    
    -- Remove from old position
    @tree.data: hashed
    @tree.data: remove(node_info.path)
    
    -- Calculate new position
    rel_bits = node_info.path.bits & ((1 << node_info.path.depth) - 1) & ~((1 << source_depth) - 1)
    rel_depth = node_info.path.depth - source_depth
    
    new_bits = target_bits << rel_depth | rel_bits
    new_depth = target_depth + rel_depth
    new_path = encodePath(new_bits, new_depth)
    
    -- Insert at new position
    @tree.data: push(new_path, {
      key = node_info.key,
      value = node_info.value
    })
  end_while_true
end

-- Traverse the tree in-order and apply a function to each node
function Traverse(tree, fn)
  @tree.meta: peek(0)
  meta = tree.meta.pop()
  
  -- Empty tree check
  if_true(meta.root_key == nil)
    return
  end_if_true
  
  -- Iterative in-order traversal
  @Stack.new(Any): alias:"stack"
  @Stack.new(Boolean): alias:"visited"
  
  current_path = meta.root_key
  
  while_true(current_path != nil or stack.depth() > 0)
    -- Reach leftmost node from current
    while_true(current_path != nil)
      @stack: push(current_path)
      @visited: push(false)
      current_path = getLeftChild(tree, current_path)
    end_while_true
    
    -- Process current node
    if_true(stack.depth() > 0)
      current_path = stack.pop()
      is_visited = visited.pop()
      
      if_true(is_visited)
        -- Already visited, move to right child
        current_path = getRightChild(tree, current_path)
      else
        -- First visit, process node and push back with visited flag
        @tree.data: hashed
        node = tree.data.peek(current_path)
        
        fn(node.key, node.value)
        
        @stack: push(current_path)
        @visited: push(true)
        
        current_path = nil
      end_if_true
    else
      break
    end_if_true
  end_while_true
end

-- Print the tree structure
function Print(tree)
  @tree.meta: peek(0)
  meta = tree.meta.pop()
  
  @Stack.new(String): alias:"result"
  @result: push("Binary Search Tree (size: " .. meta.size .. ")")
  
  -- Empty tree check
  if_true(meta.root_key == nil)
    @result: push("  (empty)")
  else
    -- Helper function to print node and its subtree
    function printNode(path, prefix, isLeft)
      if_true(path == nil or not hasNodeAt(tree, path))
        @result: push(prefix .. "├── (nil)")
        return
      end_if_true
      
      -- Print node value
      @tree.data: hashed
      node = tree.data.peek(path)
      path_str = pathToString(path)
      
      @result: push(prefix .. "├── " .. node.key .. ": " .. node.value .. 
                    " (path: " .. path_str .. ")")
      
      -- Prepare prefix for children
      childPrefix = prefix
      if_true(isLeft)
        childPrefix = childPrefix .. "│   "
      else
        childPrefix = childPrefix .. "    "
      end_if_true
      
      -- Print right child first (appears at top in tree visualization)
      right_path = getRightChild(tree, path)
      printNode(right_path, childPrefix, false)
      
      -- Print left child
      left_path = getLeftChild(tree, path)
      printNode(left_path, childPrefix, true)
    end
    
    -- Start printing from root
    printNode(meta.root_key, "", true)
  end_if_true
  
  -- Print all lines
  while_true(result.depth() > 0)
    fmt.Println(result.pop())
  end_while_true
end

-- Get the size of the tree
function Size(tree)
  @tree.meta: peek(0)
  meta = tree.meta.pop()
  return meta.size
end

-- Check if the tree is empty
function IsEmpty(tree)
  @tree.meta: peek(0)
  meta = tree.meta.pop()
  return meta.root_key == nil
end

-- Get a stack of all keys in the tree (in-order)
function Keys(tree)
  @Stack.new(Any): alias:"keys"
  @keys: fifo  -- Use FIFO perspective for in-order results
  
  Traverse(tree, function(key, value)
    @keys: push(key)
  end)
  
  return keys
end

-- Get a stack of all values in the tree (in-order)
function Values(tree)
  @Stack.new(Any): alias:"values"
  @values: fifo  -- Use FIFO perspective for in-order results
  
  Traverse(tree, function(key, value)
    @values: push(value)
  end)
  
  return values
end

-- Clear the tree
function Clear(tree)
  -- Reset values stack
  @tree.data: {}
  
  -- Reset metadata
  @tree.meta: modify_element(0, {
    root_key = nil,
    size = 0
  })
  
  return tree
end

-- Calculate the height of the tree
function Height(tree)
  @tree.meta: peek(0)
  meta = tree.meta.pop()
  
  -- Empty tree check
  if_true(meta.root_key == nil)
    return 0
  end_if_true
  
  -- Use BFS to find the maximum depth
  @Stack.new(Any): alias:"queue"
  @Stack.new(Integer): alias:"depths"
  @queue: fifo
  @depths: fifo
  
  @queue: push(meta.root_key)
  @depths: push(1)
  
  max_depth = 0
  
  while_true(queue.depth() > 0)
    current_path = queue.pop()
    current_depth = depths.pop()
    
    -- Update max depth
    if_true(current_depth > max_depth)
      max_depth = current_depth
    end_if_true
    
    -- Add children to queue
    left_path = getLeftChild(tree, current_path)
    if_true(left_path != nil)
      @queue: push(left_path)
      @depths: push(current_depth + 1)
    end_if_true
    
    right_path = getRightChild(tree, current_path)
    if_true(right_path != nil)
      @queue: push(right_path)
      @depths: push(current_depth + 1)
    end_if_true
  end_while_true
  
  return max_depth
end

-- Perform a level-order traversal of the tree
function LevelOrderTraversal(tree, fn)
  @tree.meta: peek(0)
  meta = tree.meta.pop()
  
  -- Empty tree check
  if_true(meta.root_key == nil)
    return
  end_if_true
  
  -- Use queue with FIFO perspective for BFS
  @Stack.new(Any): alias:"queue"
  @queue: fifo
  
  @queue: push(meta.root_key)
  
  while_true(queue.depth() > 0)
    current_path = queue.pop()
    
    -- Process current node
    @tree.data: hashed
    node = tree.data.peek(current_path)
    
    fn(node.key, node.value)
    
    -- Add children to queue
    left_path = getLeftChild(tree, current_path)
    if_true(left_path != nil)
      @queue: push(left_path)
    end_if_true
    
    right_path = getRightChild(tree, current_path)
    if_true(right_path != nil)
      @queue: push(right_path)
    end_if_true
  end_while_true
end

-- Create an iterator for in-order traversal
function Iterator(tree)
  @tree.meta: peek(0)
  meta = tree.meta.pop()
  
  -- Stack for traversal
  @Stack.new(Any): alias:"stack"
  
  -- Current path
  current_path = meta.root_key
  
  -- Iterator object
  return {
    next = function()
      -- Traverse to leftmost node
      while_true(current_path != nil)
        @stack: push(current_path)
        current_path = getLeftChild(tree, current_path)
      end_while_true
      
      -- If stack is empty, traversal is done
      if_true(stack.depth() == 0)
        return nil, nil
      end_if_true
      
      -- Process current node
      current_path = stack.pop()
      
      -- Get node data
      @tree.data: hashed
      node = tree.data.peek(current_path)
      
      -- Save key and value
      key = node.key
      value = node.value
      
      -- Move to right child for next iteration
      current_path = getRightChild(tree, current_path)
      
      return key, value
    end
  }
end

-- Find the minimum key-value pair in the tree
function Min(tree)
  @tree.meta: peek(0)
  meta = tree.meta.pop()
  
  -- Empty tree check
  if_true(meta.root_key == nil)
    return nil, nil
  end_if_true
  
  -- Find leftmost node
  min_path = findMin(tree, meta.root_key)
  
  @tree.data: hashed
  min_node = tree.data.peek(min_path)
  
  return min_node.key, min_node.value
end

-- Find the maximum key-value pair in the tree
function Max(tree)
  @tree.meta: peek(0)
  meta = tree.meta.pop()
  
  -- Empty tree check
  if_true(meta.root_key == nil)
    return nil, nil
  end_if_true
  
  -- Find rightmost node
  current_path = meta.root_key
  
  while_true(true)
    right_path = getRightChild(tree, current_path)
    
    if_true(right_path == nil)
      break
    end_if_true
    
    current_path = right_path
  end_while_true
  
  -- Get node data
  @tree.data: hashed
  max_node = tree.data.peek(current_path)
  
  return max_node.key, max_node.value
end