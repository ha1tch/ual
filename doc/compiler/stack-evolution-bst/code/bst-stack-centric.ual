package bst

import "fmt"

-- Create a new Binary Search Tree using a stack-centric approach
function New()
  -- Create the main stacks with proper aliases
  @Stack.new(Any): alias:"t"       -- Tree nodes
  @Stack.new(Integer): alias:"p"    -- Parent pointers
  @Stack.new(Integer): alias:"l"    -- Left child pointers
  @Stack.new(Integer): alias:"r"    -- Right child pointers
  @Stack.new(Any): alias:"k"        -- Keys
  @Stack.new(Any): alias:"v"        -- Values
  @Stack.new(Integer): alias:"meta" -- Metadata
  
  -- Initialize metadata: [root_index, size]
  @meta: push(-1)  -- root_index = -1 means empty tree
  @meta: push(0)   -- size = 0
  
  -- Return the tree structure with references to all stacks
  return {
    tree = t,
    parents = p,
    lefts = l,
    rights = r,
    keys = k,
    values = v,
    meta = meta
  }
end

-- Insert a key-value pair into the tree using stack operations
function Insert(tree, key, value)
  @tree.meta: lifo
  
  -- Get current tree size
  @tree.meta: dup
  size = tree.meta.pop()
  
  -- Get root index
  @tree.meta: swap dup
  root_idx = tree.meta.pop()
  
  -- Case: Empty tree
  if_true(root_idx < 0)
    -- Add node at position 0
    @tree.keys: push(key)
    @tree.values: push(value)
    @tree.parents: push(-1)    -- No parent
    @tree.lefts: push(-1)      -- No left child
    @tree.rights: push(-1)     -- No right child
    
    -- Update metadata
    @tree.meta: drop push(0)   -- Set root_index to 0
    @tree.meta: swap drop push(1)  -- Increment size
    return tree
  end_if_true
  
  -- Find insertion position using stack-mode traversal
  @Stack.new(Integer): alias:"path"
  @path: push(root_idx)
  
  while_true(path.depth() > 0)
    current = path.pop()
    
    -- Check if key already exists
    @tree.keys: peek(current)
    curr_key = tree.keys.pop()
    
    if_true(key == curr_key)
      -- Update existing value
      @tree.values: modify_element(current, value)
      return tree
    end_if_true
    
    if_true(key < curr_key)
      -- Go left
      @tree.lefts: peek(current)
      left_child = tree.lefts.pop()
      
      if_true(left_child < 0)
        -- Insert as left child
        new_index = size
        
        -- Add the new node
        @tree.keys: push(key)
        @tree.values: push(value)
        @tree.parents: push(current)
        @tree.lefts: push(-1)
        @tree.rights: push(-1)
        
        -- Update parent's left pointer
        @tree.lefts: modify_element(current, new_index)
        
        -- Update size in metadata
        @tree.meta: drop
        @tree.meta: push(size + 1)
        return tree
      end_if_true
      
      @path: push(left_child)
    else
      -- Go right
      @tree.rights: peek(current)
      right_child = tree.rights.pop()
      
      if_true(right_child < 0)
        -- Insert as right child
        new_index = size
        
        -- Add the new node
        @tree.keys: push(key)
        @tree.values: push(value)
        @tree.parents: push(current)
        @tree.lefts: push(-1)
        @tree.rights: push(-1)
        
        -- Update parent's right pointer
        @tree.rights: modify_element(current, new_index)
        
        -- Update size in metadata
        @tree.meta: drop
        @tree.meta: push(size + 1)
        return tree
      end_if_true
      
      @path: push(right_child)
    end_if_true
  end_while_true
  
  return tree
end

-- Find a value by key in the tree
function Find(tree, key)
  @tree.meta: peek(0)
  root_idx = tree.meta.pop()
  
  -- Empty tree check
  if_true(root_idx < 0)
    return nil
  end_if_true
  
  -- Use stack for traversal
  @Stack.new(Integer): alias:"s"
  @s: push(root_idx)
  
  while_true(s.depth() > 0)
    current = s.pop()
    
    -- Borrow just the key at current index
    scope {
      @keyslice: borrow([current..current]@tree.keys)
      curr_key = keyslice.peek()
      
      -- Found the key
      if_true(curr_key == key)
        @tree.values: peek(current)
        return tree.values.pop()
      end_if_true
      
      -- Keep searching based on comparison
      if_true(key < curr_key)
        @tree.lefts: peek(current)
        left_idx = tree.lefts.pop()
        if_true(left_idx >= 0)
          @s: push(left_idx)
        end_if_true
      else
        @tree.rights: peek(current)
        right_idx = tree.rights.pop()
        if_true(right_idx >= 0)
          @s: push(right_idx)
        end_if_true
      end_if_true
    }
  end_while_true
  
  -- Key not found
  return nil
end

-- Delete a node with the given key
function Delete(tree, key)
  @tree.meta: lifo
  
  -- Get current metadata
  @tree.meta: dup
  size = tree.meta.pop()
  @tree.meta: dup
  root_idx = tree.meta.pop()
  
  -- Empty tree check
  if_true(root_idx < 0)
    return tree
  end_if_true
  
  -- Find the node to delete
  @Stack.new(Integer): alias:"path"    -- Keeps track of the search path
  @Stack.new(Integer): alias:"s"       -- Search stack
  @s: push(root_idx)
  
  node_idx = -1  -- Index of node to delete
  
  while_true(s.depth() > 0)
    current = s.pop()
    
    scope {
      @keyslice: borrow([current..current]@tree.keys)
      curr_key = keyslice.peek()
      
      -- Found the node to delete
      if_true(curr_key == key)
        node_idx = current
        break
      end_if_true
      
      -- Save path for parent tracking
      @path: push(current)
      
      -- Continue search
      if_true(key < curr_key)
        @tree.lefts: peek(current)
        left_idx = tree.lefts.pop()
        if_true(left_idx >= 0)
          @s: push(left_idx)
        else
          break
        end_if_true
      else
        @tree.rights: peek(current)
        right_idx = tree.rights.pop()
        if_true(right_idx >= 0)
          @s: push(right_idx)
        else
          break
        end_if_true
      end_if_true
    }
  end_while_true
  
  -- If node not found, return unchanged tree
  if_true(node_idx < 0)
    return tree
  end_if_true
  
  -- Get parent, left and right children using borrowed segments
  scope {
    -- Borrowed segments maintain safety while allowing direct access
    @parents_seg: borrow([node_idx..node_idx]@tree.parents)
    @lefts_seg: borrow([node_idx..node_idx]@tree.lefts)
    @rights_seg: borrow([node_idx..node_idx]@tree.rights)
    
    parent_idx = parents_seg.peek()
    left_idx = lefts_seg.peek()
    right_idx = rights_seg.peek()
    
    -- Case 1: Leaf node (no children)
    if_true(left_idx < 0 and right_idx < 0)
      -- Update parent's pointer
      if_true(parent_idx < 0)
        -- Deleting the root
        @tree.meta: drop push(-1) -- Root becomes -1 (empty)
      else
        -- Check if node is left or right child of parent
        @tree.lefts: peek(parent_idx)
        parent_left = tree.lefts.pop()
        
        if_true(parent_left == node_idx)
          @tree.lefts: modify_element(parent_idx, -1)
        else
          @tree.rights: modify_element(parent_idx, -1)
        end_if_true
      end_if_true
    
    -- Case 2: Node with one child
    elseif_true(left_idx < 0)
      -- Only right child exists
      if_true(parent_idx < 0)
        -- Deleting the root, right child becomes new root
        @tree.meta: drop push(right_idx)
        @tree.parents: modify_element(right_idx, -1)
      else
        -- Attach right child to parent
        @tree.parents: modify_element(right_idx, parent_idx)
        
        -- Update parent's pointer
        @tree.lefts: peek(parent_idx)
        parent_left = tree.lefts.pop()
        
        if_true(parent_left == node_idx)
          @tree.lefts: modify_element(parent_idx, right_idx)
        else
          @tree.rights: modify_element(parent_idx, right_idx)
        end_if_true
      end_if_true
    
    elseif_true(right_idx < 0)
      -- Only left child exists
      if_true(parent_idx < 0)
        -- Deleting the root, left child becomes new root
        @tree.meta: drop push(left_idx)
        @tree.parents: modify_element(left_idx, -1)
      else
        -- Attach left child to parent
        @tree.parents: modify_element(left_idx, parent_idx)
        
        -- Update parent's pointer
        @tree.lefts: peek(parent_idx)
        parent_left = tree.lefts.pop()
        
        if_true(parent_left == node_idx)
          @tree.lefts: modify_element(parent_idx, left_idx)
        else
          @tree.rights: modify_element(parent_idx, left_idx)
        end_if_true
      end_if_true
    
    -- Case 3: Node with two children
    else
      -- Find inorder successor (minimum value in right subtree)
      successor_idx = right_idx
      @Stack.new(Integer): alias:"succ_path"
      @succ_path: push(right_idx)
      
      -- Find leftmost node in right subtree
      while_true(true)
        @tree.lefts: peek(successor_idx)
        left = tree.lefts.pop()
        if_true(left < 0)
          break
        end_if_true
        
        @succ_path: push(left)
        successor_idx = left
      end_while_true
      
      -- Copy successor's key and value to the node being deleted
      scope {
        @keyslice: borrow([successor_idx..successor_idx]@tree.keys)
        @valslice: borrow([successor_idx..successor_idx]@tree.values)
        
        succ_key = keyslice.peek()
        succ_value = valslice.peek()
        
        @tree.keys: modify_element(node_idx, succ_key)
        @tree.values: modify_element(node_idx, succ_value)
      }
      
      -- Now delete the successor (which has at most one child - right child)
      @tree.parents: peek(successor_idx)
      succ_parent = tree.parents.pop()
      
      @tree.rights: peek(successor_idx)
      succ_right = tree.rights.pop()
      
      if_true(succ_parent == node_idx)
        -- Successor is direct right child of the node
        @tree.rights: modify_element(node_idx, succ_right)
        if_true(succ_right >= 0)
          @tree.parents: modify_element(succ_right, node_idx)
        end_if_true
      else
        -- Successor is deeper in the right subtree
        @tree.lefts: modify_element(succ_parent, succ_right)
        if_true(succ_right >= 0)
          @tree.parents: modify_element(succ_right, succ_parent)
        end_if_true
      end_if_true
      
      -- Note: we're not actually removing the successor node from the arrays,
      -- just updating pointers. In a real implementation, we might want to
      -- compact the arrays, but that would require updating all indices.
    end_if_true
  }
  
  -- Update size
  @tree.meta: swap drop push(size - 1)
  
  return tree
end

-- Traverse the tree in-order and apply a function to each node
function Traverse(tree, fn)
  @tree.meta: peek(0)
  root_idx = tree.meta.pop()
  
  -- Empty tree check
  if_true(root_idx < 0)
    return
  end_if_true
  
  -- Use stacks for iterative in-order traversal
  @Stack.new(Integer): alias:"s"
  @Stack.new(Boolean): alias:"visited"
  @s: push(root_idx)
  @visited: push(false)
  
  while_true(s.depth() > 0)
    current = s.peek()
    is_visited = visited.pop()
    
    if_true(is_visited)
      -- Node has been visited, process it
      s.pop()  -- Remove from stack
      
      -- Process current node
      scope {
        @keyslice: borrow([current..current]@tree.keys)
        @valslice: borrow([current..current]@tree.values)
        
        curr_key = keyslice.peek()
        curr_value = valslice.peek()
        
        fn(curr_key, curr_value)
      }
      
      -- Then process right subtree
      @tree.rights: peek(current)
      right_idx = tree.rights.pop()
      
      if_true(right_idx >= 0)
        @s: push(right_idx)
        @visited: push(false)
      end_if_true
    else
      -- Mark as visited for next time
      @visited: push(true)
      
      -- First process left subtree
      @tree.lefts: peek(current)
      left_idx = tree.lefts.pop()
      
      if_true(left_idx >= 0)
        @s: push(left_idx)
        @visited: push(false)
      end_if_true
    end_if_true
  end_while_true
end

-- Print the tree structure
function Print(tree)
  @tree.meta: peek(0)
  root_idx = tree.meta.pop()
  
  @tree.meta: peek(1)
  size = tree.meta.pop()
  
  @Stack.new(String): alias:"out"
  @out: fifo  -- Use FIFO for output order
  
  @out: push("Binary Search Tree (size: " .. size .. ")")
  
  -- Empty tree check
  if_true(root_idx < 0)
    @out: push("  (empty)")
  else
    -- Use stacks for printing tree structure
    @Stack.new(Integer): alias:"nodes"
    @Stack.new(String): alias:"prefixes"
    @Stack.new(Boolean): alias:"is_left"
    
    @nodes: push(root_idx)
    @prefixes: push("")
    @is_left: push(true)  -- Doesn't matter for root
    
    while_true(nodes.depth() > 0)
      node_idx = nodes.pop()
      prefix = prefixes.pop()
      left = is_left.pop()
      
      if_true(node_idx < 0)
        @out: push(prefix .. "├── (nil)")
      else
        -- Borrow segments for the current node's data
        scope {
          @keyslice: borrow([node_idx..node_idx]@tree.keys)
          @valslice: borrow([node_idx..node_idx]@tree.values)
          @leftslice: borrow([node_idx..node_idx]@tree.lefts)
          @rightslice: borrow([node_idx..node_idx]@tree.rights)
          
          key = keyslice.peek()
          value = valslice.peek()
          left_idx = leftslice.peek()
          right_idx = rightslice.peek()
          
          @out: push(prefix .. "├── " .. key .. ": " .. value)
          
          -- Prepare prefixes for children
          child_prefix = prefix
          if_true(left)
            child_prefix = child_prefix .. "│   "
          else
            child_prefix = child_prefix .. "    "
          end_if_true
          
          -- Add children to the stack (right first for correct display)
          @nodes: push(right_idx)
          @prefixes: push(child_prefix)
          @is_left: push(false)
          
          @nodes: push(left_idx)
          @prefixes: push(child_prefix)
          @is_left: push(true)
        }
      end_if_true
    end_while_true
  end_if_true
  
  -- Print the output
  while_true(out.depth() > 0)
    fmt.Println(out.pop())
  end_while_true
end

-- Get the size of the tree
function Size(tree)
  @tree.meta: peek(1)
  return tree.meta.pop()
end

-- Check if the tree is empty
function IsEmpty(tree)
  @tree.meta: peek(0)
  root_idx = tree.meta.pop()
  return root_idx < 0
end

-- Get a stack of all keys in the tree (in-order)
function Keys(tree)
  @Stack.new(Any): alias:"result"
  @result: fifo  -- Use FIFO perspective for in-order results
  
  Traverse(tree, function(key, value)
    @result: push(key)
  end)
  
  return result
end

-- Get a stack of all values in the tree (in-order)
function Values(tree)
  @Stack.new(Any): alias:"result"
  @result: fifo  -- Use FIFO perspective for in-order results
  
  Traverse(tree, function(key, value)
    @result: push(value)
  end)
  
  return result
end

-- Clear the tree
function Clear(tree)
  -- Reset all stacks
  @tree.keys: {}
  @tree.values: {}
  @tree.parents: {}
  @tree.lefts: {}
  @tree.rights: {}
  
  -- Reset metadata
  @tree.meta: {}
  @tree.meta: push(-1)  -- root_index = -1 (empty)
  @tree.meta: push(0)   -- size = 0
  
  return tree
end

-- Get the height of the tree
function Height(tree)
  @tree.meta: peek(0)
  root_idx = tree.meta.pop()
  
  -- Empty tree check
  if_true(root_idx < 0)
    return 0
  end_if_true
  
  -- Find height using level-order traversal
  @Stack.new(Integer): alias:"queue"
  @Stack.new(Integer): alias:"levels"
  @queue: fifo  -- Use FIFO perspective for BFS
  @levels: fifo
  
  @queue: push(root_idx)
  @levels: push(1)
  
  max_level = 0
  
  while_true(queue.depth() > 0)
    node_idx = queue.pop()
    level = levels.pop()
    
    -- Update max level
    if_true(level > max_level)
      max_level = level
    end_if_true
    
    -- Borrow segments for child pointers
    scope {
      @leftslice: borrow([node_idx..node_idx]@tree.lefts)
      @rightslice: borrow([node_idx..node_idx]@tree.rights)
      
      left_idx = leftslice.peek()
      right_idx = rightslice.peek()
      
      -- Add children to the queue
      if_true(left_idx >= 0)
        @queue: push(left_idx)
        @levels: push(level + 1)
      end_if_true
      
      if_true(right_idx >= 0)
        @queue: push(right_idx)
        @levels: push(level + 1)
      end_if_true
    }
  end_while_true
  
  return max_level
end

-- Find the minimum key-value pair in the tree
function Min(tree)
  @tree.meta: peek(0)
  root_idx = tree.meta.pop()
  
  -- Empty tree check
  if_true(root_idx < 0)
    return nil, nil
  end_if_true
  
  -- Start at root and go left as far as possible
  current = root_idx
  
  while_true(true)
    -- Borrow left child pointer
    scope {
      @leftslice: borrow([current..current]@tree.lefts)
      left_idx = leftslice.peek()
      
      if_true(left_idx < 0)
        break
      end_if_true
      
      current = left_idx
    }
  end_while_true
  
  -- Get key and value
  @tree.keys: peek(current)
  key = tree.keys.pop()
  
  @tree.values: peek(current)
  value = tree.values.pop()
  
  return key, value
end

-- Find the maximum key-value pair in the tree
function Max(tree)
  @tree.meta: peek(0)
  root_idx = tree.meta.pop()
  
  -- Empty tree check
  if_true(root_idx < 0)
    return nil, nil
  end_if_true
  
  -- Start at root and go right as far as possible
  current = root_idx
  
  while_true(true)
    -- Borrow right child pointer
    scope {
      @rightslice: borrow([current..current]@tree.rights)
      right_idx = rightslice.peek()
      
      if_true(right_idx < 0)
        break
      end_if_true
      
      current = right_idx
    }
  end_while_true
  
  -- Get key and value
  @tree.keys: peek(current)
  key = tree.keys.pop()
  
  @tree.values: peek(current)
  value = tree.values.pop()
  
  return key, value
end

-- Breadth-first traversal using borrowed segments and FIFO perspective
function BreadthFirst(tree, fn)
  @tree.meta: peek(0)
  root_idx = tree.meta.pop()
  
  -- Empty tree check
  if_true(root_idx < 0)
    return
  end_if_true
  
  -- Use queue with FIFO perspective for breadth-first traversal
  @Stack.new(Integer): alias:"queue"
  @queue: fifo
  
  @queue: push(root_idx)
  
  while_true(queue.depth() > 0)
    current = queue.pop()
    
    -- Process current node using borrowed segments
    scope {
      @keyslice: borrow([current..current]@tree.keys)
      @valslice: borrow([current..current]@tree.values)
      @leftslice: borrow([current..current]@tree.lefts)
      @rightslice: borrow([current..current]@tree.rights)
      
      key = keyslice.peek()
      value = valslice.peek()
      left_idx = leftslice.peek()
      right_idx = rightslice.peek()
      
      -- Call function with key and value
      fn(key, value)
      
      -- Add children to the queue
      if_true(left_idx >= 0)
        @queue: push(left_idx)
      end_if_true
      
      if_true(right_idx >= 0)
        @queue: push(right_idx)
      end_if_true
    }
  end_while_true
end

-- Create an iterator for in-order traversal
function Iterator(tree)
  @tree.meta: peek(0)
  root_idx = tree.meta.pop()
  
  -- Create stacks for iterative traversal
  @Stack.new(Integer): alias:"path"
  
  -- Current position
  current = root_idx
  
  -- Iterator object
  return {
    -- Get the next key-value pair
    next = function()
      -- Base case: empty tree or end of traversal
      if_true(root_idx < 0 or (current < 0 and path.depth() == 0))
        return nil, nil
      end_if_true
      
      -- Find the next in-order node
      while_true(current >= 0)
        @path: push(current)
        
        -- Borrow left child pointer
        scope {
          @leftslice: borrow([current..current]@tree.lefts)
          current = leftslice.peek()
        }
      end_while_true
      
      -- If the path is empty, traversal is complete
      if_true(path.depth() == 0)
        return nil, nil
      end_if_true
      
      -- Get the next node from the path
      current = path.pop()
      
      -- Get key and value
      key = nil
      value = nil
      
      scope {
        @keyslice: borrow([current..current]@tree.keys)
        @valslice: borrow([current..current]@tree.values)
        
        key = keyslice.peek()
        value = valslice.peek()
      }
      
      -- Move to right child for next iteration
      scope {
        @rightslice: borrow([current..current]@tree.rights)
        current = rightslice.peek()
      }
      
      return key, value
    end
  }
end