package bst

import "fmt"

-- Create a new Binary Search Tree using hashed perspective
function New()
  -- Create the main data stack for node values with hashed perspective capability
  @Stack.new(Any, KeyType: Any): alias:"values"
  
  -- Create a stack for tracking the tree structure
  @Stack.new(Any): alias:"tree"
  
  -- Initialize tree data
  @tree: push({
    root = nil,   -- Root key
    size = 0      -- Tree size
  })
  
  -- Return the tree structure with references to data stacks
  return {
    values = values,
    tree = tree
  }
end

-- Insert a key-value pair into the tree
function Insert(tree, key, value)
  @tree.tree: peek(0)
  tree_data = tree.tree.pop()
  
  -- Case: Empty tree
  if_true(tree_data.root == nil)
    -- Store the value with key as hash key
    @tree.values: hashed
    @tree.values: push(key, value)
    
    -- Update tree data
    tree_data.root = key
    tree_data.size = 1
    @tree.tree: modify_element(0, tree_data)
    
    return tree
  end_if_true
  
  -- Use stack for iterative insertion
  @Stack.new(Any): alias:"path"
  @path: push(tree_data.root)
  
  -- Stacks to track parentage and direction
  @Stack.new(Any): alias:"parents"
  @Stack.new(String): alias:"directions"
  
  while_true(path.depth() > 0)
    current = path.pop()
    
    -- If key already exists, update value
    @tree.values: hashed
    if_true(tree.values.contains(current) and current == key)
      @tree.values: push(key, value)
      return tree
    end_if_true
    
    -- Save parent info
    @parents: push(current)
    
    -- Follow BST property for traversal
    if_true(key < current)
      @directions: push("left")
      
      -- Find the left child using a naming convention
      left_key = current .. "_left"
      
      @tree.values: hashed
      if_true(tree.values.contains(left_key))
        -- Get the key stored in this position
        child_key = tree.values.peek(left_key)
        @path: push(child_key)
      else
        -- Insert here as left child
        @tree.values: push(left_key, key)
        @tree.values: push(key, value)
        
        -- Update size
        tree_data.size = tree_data.size + 1
        @tree.tree: modify_element(0, tree_data)
        
        return tree
      end_if_true
    else
      @directions: push("right")
      
      -- Find the right child using a naming convention
      right_key = current .. "_right"
      
      @tree.values: hashed
      if_true(tree.values.contains(right_key))
        -- Get the key stored in this position
        child_key = tree.values.peek(right_key)
        @path: push(child_key)
      else
        -- Insert here as right child
        @tree.values: push(right_key, key)
        @tree.values: push(key, value)
        
        -- Update size
        tree_data.size = tree_data.size + 1
        @tree.tree: modify_element(0, tree_data)
        
        return tree
      end_if_true
    end_if_true
  end_while_true
  
  return tree
end

-- Find a value by key in the tree
function Find(tree, key)
  -- Simply use the hashed perspective to check if key exists
  @tree.values: hashed
  if_true(tree.values.contains(key))
    return tree.values.peek(key)
  end_if_true
  
  return nil
end

-- Check if a key exists in the tree
function Contains(tree, key)
  @tree.values: hashed
  return tree.values.contains(key)
end

-- Get the left child key of a node
function getLeftChild(tree, key)
  left_key = key .. "_left"
  
  @tree.values: hashed
  if_true(tree.values.contains(left_key))
    return tree.values.peek(left_key)
  end_if_true
  
  return nil
end

-- Get the right child key of a node
function getRightChild(tree, key)
  right_key = key .. "_right"
  
  @tree.values: hashed
  if_true(tree.values.contains(right_key))
    return tree.values.peek(right_key)
  end_if_true
  
  return nil
end

-- Find the minimum key in a subtree
function findMin(tree, start_key)
  if_true(start_key == nil)
    return nil
  end_if_true
  
  current = start_key
  left_child = getLeftChild(tree, current)
  
  while_true(left_child != nil)
    current = left_child
    left_child = getLeftChild(tree, current)
  end_while_true
  
  return current
end

-- Find the maximum key in a subtree
function findMax(tree, start_key)
  if_true(start_key == nil)
    return nil
  end_if_true
  
  current = start_key
  right_child = getRightChild(tree, current)
  
  while_true(right_child != nil)
    current = right_child
    right_child = getRightChild(tree, current)
  end_while_true
  
  return current
end

-- Find the parent of a node
function findParent(tree, key)
  @tree.tree: peek(0)
  tree_data = tree.tree.pop()
  
  -- Root has no parent
  if_true(key == tree_data.root)
    return nil
  end_if_true
  
  -- Search for the parent
  @Stack.new(Any): alias:"s"
  @s: push(tree_data.root)
  
  while_true(s.depth() > 0)
    current = s.pop()
    
    -- Check if either child is the key
    left_child = getLeftChild(tree, current)
    if_true(left_child == key)
      return current
    end_if_true
    
    right_child = getRightChild(tree, current)
    if_true(right_child == key)
      return current
    end_if_true
    
    -- Continue searching
    if_true(key < current and left_child != nil)
      @s: push(left_child)
    elseif_true(key > current and right_child != nil)
      @s: push(right_child)
    else
      -- Key not found in this path
      break
    end_if_true
  end_while_true
  
  return nil
end

-- Delete a node with the given key
function Delete(tree, key)
  -- Check if key exists
  @tree.values: hashed
  if_true(not tree.values.contains(key))
    return tree
  end_if_true
  
  @tree.tree: peek(0)
  tree_data = tree.tree.pop()
  
  -- Find parent
  parent = findParent(tree, key)
  
  -- Determine if node is left or right child of parent
  is_left_child = false
  if_true(parent != nil)
    left_child = getLeftChild(tree, parent)
    is_left_child = (left_child == key)
  end_if_true
  
  -- Get children
  left_child = getLeftChild(tree, key)
  right_child = getRightChild(tree, key)
  
  -- Case 1: Leaf node (no children)
  if_true(left_child == nil and right_child == nil)
    -- Remove from parent
    if_true(parent == nil)
      -- Removing root
      tree_data.root = nil
    elseif_true(is_left_child)
      -- Remove left child reference
      @tree.values: remove(parent .. "_left")
    else
      -- Remove right child reference
      @tree.values: remove(parent .. "_right")
    end_if_true
    
    -- Remove node value
    @tree.values: remove(key)
  
  -- Case 2: Node with only left child
  elseif_true(right_child == nil)
    -- Connect parent to left child
    if_true(parent == nil)
      -- Left child becomes new root
      tree_data.root = left_child
    elseif_true(is_left_child)
      @tree.values: push(parent .. "_left", left_child)
    else
      @tree.values: push(parent .. "_right", left_child)
    end_if_true
    
    -- Remove node value
    @tree.values: remove(key)
    @tree.values: remove(key .. "_left")
  
  -- Case 3: Node with only right child
  elseif_true(left_child == nil)
    -- Connect parent to right child
    if_true(parent == nil)
      -- Right child becomes new root
      tree_data.root = right_child
    elseif_true(is_left_child)
      @tree.values: push(parent .. "_left", right_child)
    else
      @tree.values: push(parent .. "_right", right_child)
    end_if_true
    
    -- Remove node value
    @tree.values: remove(key)
    @tree.values: remove(key .. "_right")
  
  -- Case 4: Node with two children
  else
    -- Find successor (minimum key in right subtree)
    successor = findMin(tree, right_child)
    
    -- Store successor's value
    successor_value = tree.values.peek(successor)
    
    -- Recursively delete successor
    Delete(tree, successor)
    
    -- Replace node's value with successor's value
    @tree.values: push(key, successor_value)
    
    -- Get fresh tree data after recursive deletion
    @tree.tree: peek(0)
    tree_data = tree.tree.pop()
  end_if_true
  
  -- Update size
  tree_data.size = tree_data.size - 1
  @tree.tree: modify_element(0, tree_data)
  
  return tree
end

-- Traverse the tree in-order and apply a function to each node
function Traverse(tree, fn)
  @tree.tree: peek(0)
  tree_data = tree.tree.pop()
  
  -- Empty tree check
  if_true(tree_data.root == nil)
    return
  end_if_true
  
  -- Helper function for recursive traversal
  function inorderTraversal(key)
    if_true(key == nil)
      return
    end_if_true
    
    -- Traverse left subtree
    left_child = getLeftChild(tree, key)
    inorderTraversal(left_child)
    
    -- Process current node
    @tree.values: hashed
    value = tree.values.peek(key)
    fn(key, value)
    
    -- Traverse right subtree
    right_child = getRightChild(tree, key)
    inorderTraversal(right_child)
  end
  
  -- Start traversal from root
  inorderTraversal(tree_data.root)
end

-- Print the tree structure
function Print(tree)
  @tree.tree: peek(0)
  tree_data = tree.tree.pop()
  
  @Stack.new(String): alias:"result"
  @result: push("Binary Search Tree (size: " .. tree_data.size .. ")")
  
  -- Empty tree check
  if_true(tree_data.root == nil)
    @result: push("  (empty)")
  else
    -- Helper function to print node and its subtree
    function printNode(key, prefix, isLeft)
      if_true(key == nil)
        @result: push(prefix .. "├── (nil)")
        return
      end_if_true
      
      -- Print node value
      @tree.values: hashed
      value = tree.values.peek(key)
      @result: push(prefix .. "├── " .. key .. ": " .. value)
      
      -- Prepare prefix for children
      childPrefix = prefix
      if_true(isLeft)
        childPrefix = childPrefix .. "│   "
      else
        childPrefix = childPrefix .. "    "
      end_if_true
      
      -- Print right child first (appears at top in tree visualization)
      right_child = getRightChild(tree, key)
      printNode(right_child, childPrefix, false)
      
      -- Print left child
      left_child = getLeftChild(tree, key)
      printNode(left_child, childPrefix, true)
    end
    
    -- Start printing from root
    printNode(tree_data.root, "", true)
  end_if_true
  
  -- Print all lines
  while_true(result.depth() > 0)
    fmt.Println(result.pop())
  end_while_true
end

-- Get the size of the tree
function Size(tree)
  @tree.tree: peek(0)
  tree_data = tree.tree.pop()
  return tree_data.size
end

-- Check if the tree is empty
function IsEmpty(tree)
  @tree.tree: peek(0)
  tree_data = tree.tree.pop()
  return tree_data.root == nil
end

-- Get a stack of all keys in the tree (in-order)
function Keys(tree)
  @Stack.new(Any): alias:"keys"
  @keys: fifo  -- Use FIFO perspective for in-order results
  
  Traverse(tree, function(key, value)
    @keys: push(key)
  end)
  
  return keys
end

-- Get a stack of all values in the tree (in-order)
function Values(tree)
  @Stack.new(Any): alias:"vals"
  @vals: fifo  -- Use FIFO perspective for in-order results
  
  Traverse(tree, function(key, value)
    @vals: push(value)
  end)
  
  return vals
end

-- Clear the tree
function Clear(tree)
  -- Reset values stack
  @tree.values: {}
  
  -- Reset tree data
  @tree.tree: modify_element(0, {
    root = nil,
    size = 0
  })
  
  return tree
end

-- Calculate the height of the tree
function Height(tree)
  @tree.tree: peek(0)
  tree_data = tree.tree.pop()
  
  -- Empty tree check
  if_true(tree_data.root == nil)
    return 0
  end_if_true
  
  -- Helper function to calculate height recursively
  function height(key)
    if_true(key == nil)
      return 0
    end_if_true
    
    left_height = height(getLeftChild(tree, key))
    right_height = height(getRightChild(tree, key))
    
    if_true(left_height > right_height)
      return left_height + 1
    else
      return right_height + 1
    end_if_true
  end
  
  return height(tree_data.root)
end

-- Perform a level-order traversal of the tree
function LevelOrderTraversal(tree, fn)
  @tree.tree: peek(0)
  tree_data = tree.tree.pop()
  
  -- Empty tree check
  if_true(tree_data.root == nil)
    return
  end_if_true
  
  -- Use queue with FIFO perspective for BFS
  @Stack.new(Any): alias:"queue"
  @queue: fifo
  
  @queue: push(tree_data.root)
  
  while_true(queue.depth() > 0)
    current = queue.pop()
    
    -- Process current node
    @tree.values: hashed
    value = tree.values.peek(current)
    fn(current, value)
    
    -- Add children to queue
    left_child = getLeftChild(tree, current)
    if_true(left_child != nil)
      @queue: push(left_child)
    end_if_true
    
    right_child = getRightChild(tree, current)
    if_true(right_child != nil)
      @queue: push(right_child)
    end_if_true
  end_while_true
end

-- Pretty print the tree using level-order traversal
function PrettyPrint(tree)
  @Stack.new(String): alias:"output"
  @output: fifo  -- Use FIFO perspective for correct printing order
  
  @tree.tree: peek(0)
  tree_data = tree.tree.pop()
  
  @output: push("Binary Search Tree (size: " .. tree_data.size .. ")")
  
  if_true(tree_data.root == nil)
    @output: push("  (empty)")
  else
    -- Group nodes by level
    @Stack.new(Stack): alias:"levels"
    
    -- Initialize with root level
    @Stack.new(Any): alias:"level0"
    @level0: push(tree_data.root)
    @levels: push(level0)
    
    -- Build levels
    level_idx = 0
    
    while_true(true)
      if_true(level_idx >= levels.depth())
        break
      end_if_true
      
      current_level = levels.peek(level_idx)
      
      if_true(current_level.depth() == 0)
        break
      end_if_true
      
      -- Create next level if needed
      if_true(level_idx + 1 >= levels.depth())
        @Stack.new(Any): alias:"next_level"
        @levels: push(next_level)
      end_if_true
      
      next_level = levels.peek(level_idx + 1)
      
      -- Output current level
      level_str = "Level " .. level_idx .. ": "
      
      for i = 0, current_level.depth() - 1 do
        key = current_level.peek(i)
        
        -- Add to level string
        @tree.values: hashed
        value = tree.values.peek(key)
        level_str = level_str .. key .. "=" .. value .. " "
        
        -- Add children to next level
        left_child = getLeftChild(tree, key)
        if_true(left_child != nil)
          @next_level: push(left_child)
        end_if_true
        
        right_child = getRightChild(tree, key)
        if_true(right_child != nil)
          @next_level: push(right_child)
        end_if_true
      end
      
      @output: push(level_str)
      level_idx = level_idx + 1
    end_while_true
  end_if_true
  
  -- Print output
  while_true(output.depth() > 0)
    fmt.Println(output.pop())
  end_while_true
end

-- Create an iterator for in-order traversal
function Iterator(tree)
  @tree.tree: peek(0)
  tree_data = tree.tree.pop()
  
  -- Stack for iterative traversal
  @Stack.new(Any): alias:"stack"
  
  -- Current node
  current = tree_data.root
  
  -- Iterator object with next method
  return {
    next = function()
      -- Traverse to leftmost node from current
      while_true(current != nil)
        @stack: push(current)
        current = getLeftChild(tree, current)
      end_while_true
      
      -- If stack is empty, traversal is complete
      if_true(stack.depth() == 0)
        return nil, nil
      end_if_true
      
      -- Process current node
      node_key = stack.pop()
      @tree.values: hashed
      node_value = tree.values.peek(node_key)
      
      -- Prepare for next iteration (move to right child)
      current = getRightChild(tree, node_key)
      
      return node_key, node_value
    end
  }
end