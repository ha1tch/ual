package bst

import "fmt"

-- Node structure for Binary Search Tree
-- Each node contains a key, value, and references to left and right children
function Node(key, value)
  return {
    key = key,
    value = value,
    left = nil,
    right = nil
  }
end

-- Creates a new Binary Search Tree
function New()
  return {
    root = nil,
    size = 0
  }
end

-- Insert a key-value pair into the tree
function Insert(tree, key, value)
  @Stack.new(Node): alias:"nodes"
  
  -- If tree is empty, create root node
  if_true(tree.root == nil)
    tree.root = Node(key, value)
    tree.size = tree.size + 1
    return tree
  end_if_true
  
  -- Start at root
  @nodes: push(tree.root)
  
  while_true(nodes.depth() > 0)
    current = nodes.pop()
    
    -- If key already exists, update value
    if_true(key == current.key)
      current.value = value
      return tree
    end_if_true
    
    -- If key is less than current node's key, go left
    if_true(key < current.key)
      -- If no left child, insert new node
      if_true(current.left == nil)
        current.left = Node(key, value)
        tree.size = tree.size + 1
        return tree
      end_if_true
      
      -- Otherwise, continue searching in left subtree
      @nodes: push(current.left)
    end_if_true
    
    -- If key is greater than current node's key, go right
    if_true(key > current.key)
      -- If no right child, insert new node
      if_true(current.right == nil)
        current.right = Node(key, value)
        tree.size = tree.size + 1
        return tree
      end_if_true
      
      -- Otherwise, continue searching in right subtree
      @nodes: push(current.right)
    end_if_true
  end_while_true
  
  return tree
end

-- Find a value by key in the tree
function Find(tree, key)
  @Stack.new(Node): alias:"nodes"
  
  -- If tree is empty, return nil
  if_true(tree.root == nil)
    return nil
  end_if_true
  
  -- Start at root
  @nodes: push(tree.root)
  
  while_true(nodes.depth() > 0)
    current = nodes.pop()
    
    -- If found, return value
    if_true(key == current.key)
      return current.value
    end_if_true
    
    -- If key is less than current node's key, go left
    if_true(key < current.key and current.left != nil)
      @nodes: push(current.left)
    end_if_true
    
    -- If key is greater than current node's key, go right
    if_true(key > current.key and current.right != nil)
      @nodes: push(current.right)
    end_if_true
  end_while_true
  
  -- Key not found
  return nil
end

-- Delete a node with the given key from the tree
function Delete(tree, key)
  -- Helper function to find the minimum node in a subtree
  function findMin(node)
    while_true(node.left != nil)
      node = node.left
    end_while_true
    return node
  end
  
  -- Recursive helper function for deletion
  function deleteRec(node, key)
    -- Base case: empty tree
    if_true(node == nil)
      return nil
    end_if_true
    
    -- Find the node to delete
    if_true(key < node.key)
      node.left = deleteRec(node.left, key)
    elseif_true(key > node.key)
      node.right = deleteRec(node.right, key)
    else
      -- Node found, handle deletion based on children
      
      -- Case 1: No children (leaf node)
      if_true(node.left == nil and node.right == nil)
        tree.size = tree.size - 1
        return nil
      end_if_true
      
      -- Case 2: Only one child
      if_true(node.left == nil)
        tree.size = tree.size - 1
        return node.right
      end_if_true
      
      if_true(node.right == nil)
        tree.size = tree.size - 1
        return node.left
      end_if_true
      
      -- Case 3: Two children
      -- Find the inorder successor (minimum value in right subtree)
      successor = findMin(node.right)
      
      -- Copy successor's data to this node
      node.key = successor.key
      node.value = successor.value
      
      -- Delete the successor (which has at most one child)
      node.right = deleteRec(node.right, successor.key)
    end_if_true
    
    return node
  end
  
  -- Start the deletion process from the root
  tree.root = deleteRec(tree.root, key)
  return tree
end

-- Traverse the tree in-order and apply a function to each node
function Traverse(tree, fn)
  -- Recursive helper function for in-order traversal
  function inorder(node)
    if_true(node != nil)
      inorder(node.left)
      fn(node.key, node.value)
      inorder(node.right)
    end_if_true
  end
  
  inorder(tree.root)
end

-- Print the tree structure
function Print(tree)
  @Stack.new(String): alias:"result"
  
  function printNode(node, prefix, isLeft)
    if_true(node == nil)
      @result: push(prefix .. "├── (nil)")
      return
    end_if_true
    
    @result: push(prefix .. "├── " .. node.key .. ": " .. node.value)
    
    -- Prepare prefix for children
    childPrefix = prefix
    if_true(isLeft)
      childPrefix = childPrefix .. "│   "
    else
      childPrefix = childPrefix .. "    "
    end_if_true
    
    -- Recursively print right and left subtrees
    if_true(node.right != nil or node.left != nil)
      printNode(node.right, childPrefix, false)
      printNode(node.left, childPrefix, true)
    end_if_true
  end
  
  @result: push("Tree (size " .. tree.size .. "):")
  printNode(tree.root, "", true)
  
  -- Join all lines with newlines and print
  while_true(result.depth() > 0)
    fmt.Println(result.pop())
  end_while_true
end

-- Get the size of the tree
function Size(tree)
  return tree.size
end

-- Check if the tree is empty
function IsEmpty(tree)
  return tree.root == nil
end

-- Get a stack of all keys in the tree (in-order)
function Keys(tree)
  @Stack.new(Any): alias:"keys"
  
  function collectKeys(node)
    if_true(node != nil)
      collectKeys(node.left)
      @keys: push(node.key)
      collectKeys(node.right)
    end_if_true
  end
  
  collectKeys(tree.root)
  return keys
end

-- Get a stack of all values in the tree (in-order)
function Values(tree)
  @Stack.new(Any): alias:"values"
  
  function collectValues(node)
    if_true(node != nil)
      collectValues(node.left)
      @values: push(node.value)
      collectValues(node.right)
    end_if_true
  end
  
  collectValues(tree.root)
  return values
end

-- Clear the tree
function Clear(tree)
  tree.root = nil
  tree.size = 0
  return tree
end

-- Helper function to check if a tree satisfies the BST property
function IsBST(tree)
  function isBSTUtil(node, min, max)
    -- Empty tree is a valid BST
    if_true(node == nil)
      return true
    end_if_true
    
    -- Check if current node's key is within valid range
    if_true((min != nil and node.key <= min) or (max != nil and node.key >= max))
      return false
    end_if_true
    
    -- Recursively check left and right subtrees
    return isBSTUtil(node.left, min, node.key) and isBSTUtil(node.right, node.key, max)
  end
  
  -- Start validation from root with no constraints
  return isBSTUtil(tree.root, nil, nil)
end

-- Get the height of the tree
function Height(tree)
  function height(node)
    if_true(node == nil)
      return 0
    end_if_true
    
    leftHeight = height(node.left)
    rightHeight = height(node.right)
    
    -- Return the maximum height plus 1 for current node
    if_true(leftHeight > rightHeight)
      return leftHeight + 1
    else
      return rightHeight + 1
    end_if_true
  end
  
  return height(tree.root)
end