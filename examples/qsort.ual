package qsort

-- A custom stack for our sorting operations
sortStack = Stack.new()

-- Public function to sort an array in-place
function Sort(arr)
  if arr == nil or #arr <= 1 then
    return arr  -- Already sorted
  end
  
  -- Start the quicksort with the full array bounds
  quicksort(arr, 0, #arr - 1)
  return arr
end

-- Internal quicksort implementation
function quicksort(arr, low, high)
  -- Base case: If the partition has one element or fewer, it's sorted
  if low >= high then
    return
  end
  
  -- Partition the array and get the pivot position
  local pivotPos = partition(arr, low, high)
  
  -- Recursively sort the sub-arrays
  quicksort(arr, low, pivotPos - 1)   -- Sort elements before pivot
  quicksort(arr, pivotPos + 1, high)  -- Sort elements after pivot
end

-- Partition the array and return the pivot position
function partition(arr, low, high)
  -- Use the rightmost element as the pivot
  local pivot = arr[high]
  
  -- Using stacked mode for index tracking
  @sortStack > push(low) push:1 sub  -- i starts at low-1
  
  -- Iterate through elements from low to high-1
  for j = low, high - 1 do
    -- If current element is smaller than pivot
    if arr[j] <= pivot then
      -- Increment i and swap arr[i] with arr[j]
      @sortStack > dup push:1 add  -- Increment i
      local i = sortStack.pop()
      
      -- Swap elements using multiple assignment
      arr[i], arr[j] = arr[j], arr[i]
    end
  end
  
  -- Get final i value and increment for pivot position
  @sortStack > push:1 add
  local pivotPos = sortStack.pop()
  
  -- Place pivot in its final position
  arr[pivotPos], arr[high] = arr[high], arr[pivotPos]
  
  return pivotPos
end

-- Public function to create a sorted copy of an array
function SortCopy(arr)
  if arr == nil then
    return nil
  end
  
  -- Create a copy of the array
  local copy = {}
  for i = 1, #arr do
    copy[i] = arr[i]
  end
  
  -- Sort the copy
  return Sort(copy)
end

-- Specialized sort for integers that uses switch statement for partition choice
function SortInts(arr)
  if arr == nil or #arr <= 1 then
    return arr
  end
  
  -- Determine partition strategy based on array size
  switch_case(#arr)
    case 2, 3, 4, 5:
      -- For very small arrays, use simple partition
      quicksortInts(arr, 0, #arr - 1, "simple")
    case 6, 7, 8, 9, 10:
      -- For small arrays, use median-of-three partition
      quicksortInts(arr, 0, #arr - 1, "median3")
    default:
      -- For larger arrays, use median-of-three partition with insertion sort for small subarrays
      quicksortInts(arr, 0, #arr - 1, "hybrid")
  end_switch
  
  return arr
end

-- Integer-optimized quicksort with different partition strategies
function quicksortInts(arr, low, high, strategy)
  -- Use stack to track partitioning tasks instead of recursion
  partitionStack = Stack.new()
  
  -- Initialize stack with the first partition range
  @partitionStack > push(low) push(high)
  
  while_true(partitionStack.depth() > 0)
    -- Get the next partition range
    @partitionStack > swap
    local currHigh = partitionStack.pop()
    local currLow = partitionStack.pop()
    
    -- Skip if already sorted
    if currLow >= currHigh then
      continue  -- Skip to next iteration
    end
    
    -- Small arrays get insertion sort if using hybrid strategy
    if strategy == "hybrid" and currHigh - currLow < 10 then
      insertionSort(arr, currLow, currHigh)
      continue
    end
    
    -- Choose partition method based on strategy
    local pivotPos = 0
    switch_case(strategy)
      case "simple":
        pivotPos = partitionSimple(arr, currLow, currHigh)
      case "median3":
        pivotPos = partitionMedian3(arr, currLow, currHigh)
      default:
        pivotPos = partitionSimple(arr, currLow, currHigh)
    end_switch
    
    -- Push sub-arrays onto stack
    @partitionStack > push(pivotPos + 1) push(currHigh)  -- Right subarray
    @partitionStack > push(currLow) push(pivotPos - 1)   -- Left subarray
  end_while_true
end

-- Simple partition method that uses the rightmost element as pivot
function partitionSimple(arr, low, high)
  local pivot = arr[high]
  local i = low - 1
  
  for j = low, high - 1 do
    if arr[j] <= pivot then
      i = i + 1
      arr[i], arr[j] = arr[j], arr[i]
    end
  end
  
  arr[i + 1], arr[high] = arr[high], arr[i + 1]
  return i + 1
end

-- Median-of-three partition method
function partitionMedian3(arr, low, high)
  local mid = math.floor((low + high) / 2)
  
  -- Sort low, mid, high elements to find median
  if arr[mid] < arr[low] then
    arr[low], arr[mid] = arr[mid], arr[low]
  end
  
  if arr[high] < arr[low] then
    arr[low], arr[high] = arr[high], arr[low]
  end
  
  if arr[high] < arr[mid] then
    arr[mid], arr[high] = arr[high], arr[mid]
  end
  
  -- Place pivot at high-1
  arr[mid], arr[high-1] = arr[high-1], arr[mid]
  
  -- Now use high-1 as pivot
  return partitionSimple(arr, low, high)
end

-- Insertion sort for small arrays or as part of hybrid quicksort
function insertionSort(arr, low, high)
  for i = low + 1, high do
    local key = arr[i]
    local j = i - 1
    
    -- Using stacked mode for the inner loop
    @sortStack > push(key) push(j)
    while_true(sortStack.peek() >= low)
      @sortStack > dup push(arr[sortStack.peek()]) swap lt
      if_false(sortStack.pop())
        break
      end_if_false
      
      @sortStack > dup push:1 add  -- j+1
      arr[sortStack.pop()] = arr[sortStack.peek()]
      
      @sortStack > push:1 sub  -- j-1
    end_while_true
    
    -- Get the final position and place the key
    @sortStack > push:1 add
    arr[sortStack.pop()] = sortStack.pop()
  end
end