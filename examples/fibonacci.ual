package fib

import "fmt"

-- Dedicated stack for Fibonacci calculations
fibStack = Stack.new()

-- Recursive Fibonacci implementation (traditional style)
function Recursive(n)
  if n <= 1 then
    return n
  end
  
  return Recursive(n-1) + Recursive(n-2)
end

-- Iterative Fibonacci implementation (variable-based)
function Iterative(n)
  if n <= 1 then
    return n
  end
  
  local a, b = 0, 1
  for i = 2, n do
    a, b = b, a + b
  end
  
  return b
end

-- Stack-based Fibonacci implementation using stacked mode
function StackBased(n)
  if n <= 1 then
    return n
  end
  
  -- Initialize the stack with first two Fibonacci numbers
  @fibStack > push:0 push:1
  
  -- Calculate the n-th Fibonacci number
  for i = 2, n do
    -- Calculate next number and rotate stack
    @fibStack > dup rot add
  end
  
  -- Return the result (top of stack)
  return fibStack.pop()
end

-- Memoized Fibonacci implementation for efficiency
function Memoized(n)
  -- Table for memoization
  local memo = {[0] = 0, [1] = 1}
  
  -- Inner recursive function with memoization
  local function fib(x)
    if memo[x] ~= nil then
      return memo[x]
    end
    
    memo[x] = fib(x-1) + fib(x-2)
    return memo[x]
  end
  
  return fib(n)
end

-- Fibonacci using matrix exponentiation (most efficient for large n)
function Matrix(n)
  if n <= 1 then
    return n
  end
  
  -- Calculate F(n) using matrix exponentiation: [[1,1],[1,0]]^n
  local a, b, c, d = 1, 1, 1, 0
  local temp_a, temp_b, temp_c, temp_d
  local m = n - 1
  
  -- Using stacked mode for efficient calculation
  while_true(m > 0)
    switch_case(m & 1)
      case 1:
        -- Multiply current matrix by the result
        @fibStack > push(a) push(b) push(c) push(d)
        temp_a = a*fibStack.pop() + b*fibStack.pop()
        temp_b = a*fibStack.pop() + b*fibStack.pop()
        temp_c = c*a + d*b
        temp_d = c*b + d*d
        a, b, c, d = temp_a, temp_b, temp_c, temp_d
    end_switch
    
    -- Square the matrix for next iteration
    if m > 1 then
      temp_a = a*a + b*c
      temp_b = a*b + b*d
      temp_c = c*a + d*c
      temp_d = c*b + d*d
      a, b, c, d = temp_a, temp_b, temp_c, temp_d
    end
    
    m = m >> 1
  end_while_true
  
  return a
end

-- Benchmark different Fibonacci implementations
function Benchmark(n)
  fmt.Printf("Benchmarking Fibonacci(%d) with different implementations:\n", n)
  
  fmt.Printf("Recursive: %d\n", Recursive(n))
  fmt.Printf("Iterative: %d\n", Iterative(n))
  fmt.Printf("Stack-based: %d\n", StackBased(n))
  fmt.Printf("Memoized: %d\n", Memoized(n))
  fmt.Printf("Matrix: %d\n", Matrix(n))
  
  fmt.Printf("\nNote: For large values of n, only use Iterative, Memoized, or Matrix implementations.\n")
}